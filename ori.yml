Resources:
  HealthTableB882C94E:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: heath-table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: HealthappStack/HealthTable/Resource
  HealthKnowledgeBaseRole03B3B4A0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
          - Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Join
                  - ''
                  - - 'arn:'
                    - !Ref AWS::Partition
                    - ':bedrock:'
                    - !Ref AWS::Region
                    - ':'
                    - !Ref AWS::AccountId
                    - ':knowledge-base/*'
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Ref HealthKnowledgeBaseKBVectorsAOSSApiAccessAll231C6061
      RoleName: AmazonBedrockExecutionRoleForKnowledgeBaseHealthadgeBaseDC0C93F1
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/Role/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: The KB role needs read only access to all objects in the data source bucket.
            id: AwsSolutions-IAM5
  HealthKnowledgeBaseRoleDefaultPolicyED52E19B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:InvokeModel
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:bedrock:'
                - !Ref AWS::Region
                - '::foundation-model/amazon.titan-embed-text-v1'
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - !GetAtt HealthDocumentBucketD3CB5681.Arn
              - !Join
                - ''
                - - !GetAtt HealthDocumentBucketD3CB5681.Arn
                  - /*
        Version: '2012-10-17'
      PolicyName: HealthKnowledgeBaseRoleDefaultPolicyED52E19B
      Roles:
        - !Ref HealthKnowledgeBaseRole03B3B4A0
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/Role/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: The KB role needs read only access to all objects in the data source bucket.
            id: AwsSolutions-IAM5
  HealthKnowledgeBaseKBVectorsEncryptionPolicy23292CF1:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: encryptionpolicyhealtorsbeaafaae
      Policy: '{"Rules":[{"ResourceType":"collection","Resource":["collection/vectorstorehealthectorsbeaafaae"]}],"AWSOwnedKey":true}'
      Type: encryption
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/KBVectors/EncryptionPolicy
  HealthKnowledgeBaseKBVectorsNetworkPolicy0DA232B2:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: networkpolicyhealtctorsbeaafaae
      Policy: '[{"Rules":[{"ResourceType":"collection","Resource":["collection/vectorstorehealthectorsbeaafaae"]},{"ResourceType":"dashboard","Resource":["collection/vectorstorehealthectorsbeaafaae"]}],"AllowFromPublic":true}]'
      Type: network
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/KBVectors/NetworkPolicy
  HealthKnowledgeBaseKBVectorsVectorCollection7B6738A3:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: vectorstorehealthectorsbeaafaae
      Type: VECTORSEARCH
    DependsOn:
      - HealthKnowledgeBaseKBVectorsEncryptionPolicy23292CF1
      - HealthKnowledgeBaseKBVectorsNetworkPolicy0DA232B2
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/KBVectors/VectorCollection
  HealthKnowledgeBaseKBVectorsAOSSApiAccessAll231C6061:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ''
      Path: /
      PolicyDocument:
        Statement:
          - Action: aoss:APIAccessAll
            Effect: Allow
            Resource: !GetAtt HealthKnowledgeBaseKBVectorsVectorCollection7B6738A3.Arn
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/KBVectors/AOSSApiAccessAll/Resource
  HealthKnowledgeBaseKBVectorsDataAccessPolicy50B61715:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: dataaccesspolicyhealtorsbeaafaae
      Policy: !Join
        - ''
        - - '[{"Rules":[{"Resource":["collection/vectorstorehealthectorsbeaafaae"],"Permission":["aoss:DescribeCollectionItems","aoss:CreateCollectionItems","aoss:UpdateCollectionItems"],"ResourceType":"collection"},{"Resource":["index/vectorstorehealthectorsbeaafaae/*"],"Permission":["aoss:UpdateIndex","aoss:DescribeIndex","aoss:ReadDocument","aoss:WriteDocument","aoss:CreateIndex"],"ResourceType":"index"}],"Principal":["'
          - !GetAtt HealthKnowledgeBaseRole03B3B4A0.Arn
          - '"],"Description":""}]'
      Type: data
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/KBVectors/DataAccessPolicy
    Condition: HealthKnowledgeBaseKBVectorsIsDataAccessPolicyNotEmpty2F65E018
  HealthKnowledgeBaseKBIndexManageIndexPolicy0E576054:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: manageindexpolicyheadex06ce615c
      Policy: !Join
        - ''
        - - '[{"Rules":[{"Resource":["index/vectorstorehealthectorsbeaafaae/*"],"Permission":["aoss:DescribeIndex","aoss:CreateIndex","aoss:DeleteIndex","aoss:UpdateIndex"],"ResourceType":"index"},{"Resource":["collection/vectorstorehealthectorsbeaafaae"],"Permission":["aoss:DescribeCollectionItems"],"ResourceType":"collection"}],"Principal":["'
          - !GetAtt OpenSearchIndexCRProviderCRRole466FC04E.Arn
          - '"],"Description":""}]'
      Type: data
    DependsOn:
      - HealthKnowledgeBaseKBVectorsAOSSApiAccessAll231C6061
      - HealthKnowledgeBaseKBVectorsDataAccessPolicy50B61715
      - HealthKnowledgeBaseKBVectorsEncryptionPolicy23292CF1
      - HealthKnowledgeBaseKBVectorsNetworkPolicy0DA232B2
      - HealthKnowledgeBaseKBVectorsVectorCollection7B6738A3
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/KBIndex/ManageIndexPolicy
  HealthKnowledgeBaseKBIndexVectorIndex22BA6F3F:
    Type: Custom::OpenSearchIndex
    Properties:
      ServiceToken: !GetAtt OpenSearchIndexCRProviderframeworkonEvent6CAE4696.Arn
      Endpoint: !Join
        - ''
        - - !GetAtt HealthKnowledgeBaseKBVectorsVectorCollection7B6738A3.Id
          - .
          - !Ref AWS::Region
          - .aoss.amazonaws.com
      IndexName: bedrock-knowledge-base-default-index
      VectorField: bedrock-knowledge-base-default-vector
      Dimensions: 1536
      MetadataManagement:
        - MappingField: AMAZON_BEDROCK_TEXT_CHUNK
          DataType: text
          Filterable: true
        - MappingField: AMAZON_BEDROCK_METADATA
          DataType: text
          Filterable: false
    DependsOn:
      - HealthKnowledgeBaseKBIndexManageIndexPolicy0E576054
      - HealthKnowledgeBaseKBVectorsAOSSApiAccessAll231C6061
      - HealthKnowledgeBaseKBVectorsDataAccessPolicy50B61715
      - HealthKnowledgeBaseKBVectorsEncryptionPolicy23292CF1
      - HealthKnowledgeBaseKBVectorsNetworkPolicy0DA232B2
      - HealthKnowledgeBaseKBVectorsVectorCollection7B6738A3
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/KBIndex/VectorIndex/Default
  HealthKnowledgeBaseKBA7ABAFAC:
    Type: Custom::Bedrock-KnowledgeBase
    Properties:
      ServiceToken: !GetAtt BedrockCRProviderframeworkonEvent412F4EF1.Arn
      knowledgeBaseConfiguration:
        type: VECTOR
        vectorKnowledgeBaseConfiguration:
          embeddingModelArn: !Join
            - ''
            - - 'arn:aws:bedrock:'
              - !Ref AWS::Region
              - '::foundation-model/amazon.titan-embed-text-v1'
      roleArn: !GetAtt HealthKnowledgeBaseRole03B3B4A0.Arn
      name: KBHealthappStowledgeBaseDC0C93F1
      storageConfiguration:
        type: OPENSEARCH_SERVERLESS
        opensearchServerlessConfiguration:
          collectionArn: !GetAtt HealthKnowledgeBaseKBVectorsVectorCollection7B6738A3.Arn
          vectorIndexName: bedrock-knowledge-base-default-index
          fieldMapping:
            vectorField: bedrock-knowledge-base-default-vector
            textField: AMAZON_BEDROCK_TEXT_CHUNK
            metadataField: AMAZON_BEDROCK_METADATA
    DependsOn:
      - HealthKnowledgeBaseKBCRPolicy1C37AF70
      - HealthKnowledgeBaseKBIndexManageIndexPolicy0E576054
      - HealthKnowledgeBaseKBIndexVectorIndex22BA6F3F
      - HealthKnowledgeBaseRoleDefaultPolicyED52E19B
      - HealthKnowledgeBaseRole03B3B4A0
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/KB/Default
  HealthKnowledgeBaseKBCRPolicy1C37AF70:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:CreateKnowledgeBase
            Effect: Allow
            Resource: '*'
          - Action:
              - bedrock:DeleteKnowledgeBase
              - bedrock:TagResource
              - bedrock:UpdateKnowledgeBase
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:'
                - !Ref AWS::Partition
                - ':bedrock:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':knowledge-base/*'
          - Action: iam:PassRole
            Effect: Allow
            Resource: !GetAtt HealthKnowledgeBaseRole03B3B4A0.Arn
        Version: '2012-10-17'
      PolicyName: HealthKnowledgeBaseKBCRPolicy1C37AF70
      Roles:
        - !Ref BedrockCRProviderCRRole90406B17
    Metadata:
      aws:cdk:path: HealthappStack/HealthKnowledgeBase/KBCRPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: Bedrock CreateKnowledgeBase can't be restricted by resource.
            id: AwsSolutions-IAM5
  OpenSearchIndexCRProviderCRRole466FC04E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Ref HealthKnowledgeBaseKBVectorsAOSSApiAccessAll231C6061
    Metadata:
      aws:cdk:path: HealthappStack/OpenSearchIndexCRProvider/CRRole/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.
            id: AwsSolutions-IAM4
  OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: afcbb447dd78ce973e3dc968535006919f22b65b22b4595b796fea3c1cabcbe2.zip
      Description: Custom Resource Provider
      Handler: custom_resources.on_event
      MemorySize: 128
      Role: !GetAtt OpenSearchIndexCRProviderCRRole466FC04E.Arn
      Runtime: python3.12
      Timeout: 900
    DependsOn:
      - OpenSearchIndexCRProviderCRRole466FC04E
    Metadata:
      aws:cdk:path: HealthappStack/OpenSearchIndexCRProvider/CustomResourcesFunction/Resource
      aws:asset:path: asset.afcbb447dd78ce973e3dc968535006919f22b65b22b4595b796fea3c1cabcbe2
      aws:asset:is-bundled: false
      aws:asset:property: Code
  OpenSearchIndexCRProviderCustomResourcesFunctionLogRetentionC32546EF:
    Type: Custom::LogRetention
    Properties:
      ServiceToken: !GetAtt LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A.Arn
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2
      RetentionInDays: 7
    Metadata:
      aws:cdk:path: HealthappStack/OpenSearchIndexCRProvider/CustomResourcesFunction/LogRetention/Resource
  OpenSearchIndexCRProviderProviderRole87B4E831:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: HealthappStack/OpenSearchIndexCRProvider/ProviderRole/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.
            id: AwsSolutions-IAM4
          - reason: CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.
            id: AwsSolutions-IAM5
            applies_to:
              - regex: /^Resource::<OpenSearchIndexCRProviderCustomResourcesFunction[A-Z0-9]+\.Arn>:\*$/g
  OpenSearchIndexCRProviderProviderRoleDefaultPolicy9810CB1F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - !GetAtt OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2.Arn
              - !Join
                - ''
                - - !GetAtt OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2.Arn
                  - ':*'
        Version: '2012-10-17'
      PolicyName: OpenSearchIndexCRProviderProviderRoleDefaultPolicy9810CB1F
      Roles:
        - !Ref OpenSearchIndexCRProviderProviderRole87B4E831
    Metadata:
      aws:cdk:path: HealthappStack/OpenSearchIndexCRProvider/ProviderRole/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.
            id: AwsSolutions-IAM5
            applies_to:
              - regex: /^Resource::<OpenSearchIndexCRProviderCustomResourcesFunction[A-Z0-9]+\.Arn>:\*$/g
  OpenSearchIndexCRProviderframeworkonEvent6CAE4696:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 3542be390685e0c8353d92ccb5796d343cd93ca946b6b0de798004206a199adc.zip
      Description: AWS CDK resource provider framework - onEvent (HealthappStack/OpenSearchIndexCRProvider/Provider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN: !GetAtt OpenSearchIndexCRProviderCustomResourcesFunction4F9ADEA2.Arn
      Handler: framework.onEvent
      Role: !GetAtt OpenSearchIndexCRProviderProviderRole87B4E831.Arn
      Runtime: nodejs18.x
      Timeout: 900
    DependsOn:
      - OpenSearchIndexCRProviderProviderRoleDefaultPolicy9810CB1F
      - OpenSearchIndexCRProviderProviderRole87B4E831
    Metadata:
      aws:cdk:path: HealthappStack/OpenSearchIndexCRProvider/Provider/framework-onEvent/Resource
      aws:asset:path: asset.3542be390685e0c8353d92ccb5796d343cd93ca946b6b0de798004206a199adc
      aws:asset:is-bundled: false
      aws:asset:property: Code
      cdk_nag:
        rules_to_suppress:
          - reason: Lambda runtime version is managed upstream by CDK.
            id: AwsSolutions-L1
  OpenSearchIndexCRProviderframeworkonEventLogRetention64E7FA2B:
    Type: Custom::LogRetention
    Properties:
      ServiceToken: !GetAtt LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A.Arn
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref OpenSearchIndexCRProviderframeworkonEvent6CAE4696
      RetentionInDays: 7
    Metadata:
      aws:cdk:path: HealthappStack/OpenSearchIndexCRProvider/Provider/framework-onEvent/LogRetention/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: HealthappStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:DeleteRetentionPolicy
              - logs:PutRetentionPolicy
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      Roles:
        - !Ref LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: HealthappStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 900
      Code:
        S3Bucket: !Sub cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35.zip
      Role: !GetAtt LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB.Arn
    DependsOn:
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: HealthappStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource
      aws:asset:path: asset.4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35
      aws:asset:is-bundled: false
      aws:asset:property: Code
  BedrockCRProviderCRRole90406B17:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: HealthappStack/BedrockCRProvider/CRRole/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.
            id: AwsSolutions-IAM4
  BedrockCRProviderCustomResourcesFunction9A70E3A5:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 920780c9c0456a8e7d0648a9905a4292333391b7a79872eb1cb0adab577eb403.zip
      Description: Custom Resource Provider
      Handler: custom_resources.on_event
      MemorySize: 128
      Role: !GetAtt BedrockCRProviderCRRole90406B17.Arn
      Runtime: python3.12
      Timeout: 900
    DependsOn:
      - BedrockCRProviderCRRole90406B17
    Metadata:
      aws:cdk:path: HealthappStack/BedrockCRProvider/CustomResourcesFunction/Resource
      aws:asset:path: asset.920780c9c0456a8e7d0648a9905a4292333391b7a79872eb1cb0adab577eb403
      aws:asset:is-bundled: false
      aws:asset:property: Code
  BedrockCRProviderCustomResourcesFunctionLogRetention32CED555:
    Type: Custom::LogRetention
    Properties:
      ServiceToken: !GetAtt LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A.Arn
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref BedrockCRProviderCustomResourcesFunction9A70E3A5
      RetentionInDays: 7
    Metadata:
      aws:cdk:path: HealthappStack/BedrockCRProvider/CustomResourcesFunction/LogRetention/Resource
  BedrockCRProviderProviderRoleE6EBD17C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: HealthappStack/BedrockCRProvider/ProviderRole/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.
            id: AwsSolutions-IAM4
          - reason: CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.
            id: AwsSolutions-IAM5
            applies_to:
              - regex: /^Resource::<BedrockCRProviderCustomResourcesFunction[A-Z0-9]+\.Arn>:\*$/g
  BedrockCRProviderProviderRoleDefaultPolicy517A1A7C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - !GetAtt BedrockCRProviderCustomResourcesFunction9A70E3A5.Arn
              - !Join
                - ''
                - - !GetAtt BedrockCRProviderCustomResourcesFunction9A70E3A5.Arn
                  - ':*'
        Version: '2012-10-17'
      PolicyName: BedrockCRProviderProviderRoleDefaultPolicy517A1A7C
      Roles:
        - !Ref BedrockCRProviderProviderRoleE6EBD17C
    Metadata:
      aws:cdk:path: HealthappStack/BedrockCRProvider/ProviderRole/DefaultPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.
            id: AwsSolutions-IAM5
            applies_to:
              - regex: /^Resource::<BedrockCRProviderCustomResourcesFunction[A-Z0-9]+\.Arn>:\*$/g
  BedrockCRProviderframeworkonEvent412F4EF1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 3542be390685e0c8353d92ccb5796d343cd93ca946b6b0de798004206a199adc.zip
      Description: AWS CDK resource provider framework - onEvent (HealthappStack/BedrockCRProvider/Provider)
      Environment:
        Variables:
          USER_ON_EVENT_FUNCTION_ARN: !GetAtt BedrockCRProviderCustomResourcesFunction9A70E3A5.Arn
      Handler: framework.onEvent
      Role: !GetAtt BedrockCRProviderProviderRoleE6EBD17C.Arn
      Runtime: nodejs18.x
      Timeout: 900
    DependsOn:
      - BedrockCRProviderProviderRoleDefaultPolicy517A1A7C
      - BedrockCRProviderProviderRoleE6EBD17C
    Metadata:
      aws:cdk:path: HealthappStack/BedrockCRProvider/Provider/framework-onEvent/Resource
      aws:asset:path: asset.3542be390685e0c8353d92ccb5796d343cd93ca946b6b0de798004206a199adc
      aws:asset:is-bundled: false
      aws:asset:property: Code
      cdk_nag:
        rules_to_suppress:
          - reason: Lambda runtime version is managed upstream by CDK.
            id: AwsSolutions-L1
  BedrockCRProviderframeworkonEventLogRetention862855F3:
    Type: Custom::LogRetention
    Properties:
      ServiceToken: !GetAtt LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A.Arn
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref BedrockCRProviderframeworkonEvent412F4EF1
      RetentionInDays: 7
    Metadata:
      aws:cdk:path: HealthappStack/BedrockCRProvider/Provider/framework-onEvent/LogRetention/Resource
  HealthDocumentBucketD3CB5681:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: HealthappStack/HealthDocumentBucket/Resource
  HealthDocumentBucketNotifications0006B506:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken: !GetAtt BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691.Arn
      BucketName: !Ref HealthDocumentBucketD3CB5681
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn: !GetAtt IngestionJob878E4082.Arn
          - Events:
              - s3:ObjectRemoved:*
            LambdaFunctionArn: !GetAtt IngestionJob878E4082.Arn
      Managed: true
    DependsOn:
      - HealthDocumentBucketAllowBucketNotificationsToHealthappStackIngestionJob44E38E8B4E6D0FBE
    Metadata:
      aws:cdk:path: HealthappStack/HealthDocumentBucket/Notifications/Resource
  HealthDocumentBucketAllowBucketNotificationsToHealthappStackIngestionJob44E38E8B4E6D0FBE:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IngestionJob878E4082.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt HealthDocumentBucketD3CB5681.Arn
    Metadata:
      aws:cdk:path: HealthappStack/HealthDocumentBucket/AllowBucketNotificationsToHealthappStackIngestionJob44E38E8B
  KBS3DataSource0370EBB1:
    Type: Custom::Bedrock-DataSource
    Properties:
      ServiceToken: !GetAtt BedrockCRProviderframeworkonEvent412F4EF1.Arn
      knowledgeBaseId: !GetAtt HealthKnowledgeBaseKBA7ABAFAC.knowledgeBaseId
      name: documents
      dataSourceConfiguration:
        type: S3
        s3Configuration:
          bucketArn: !GetAtt HealthDocumentBucketD3CB5681.Arn
      vectorIngestionConfiguration:
        chunkingConfiguration:
          chunkingStrategy: FIXED_SIZE
          fixedSizeChunkingConfiguration:
            maxTokens: 500
            overlapPercentage: 20
    DependsOn:
      - KBS3DataSourceDataSourceCRPolicy4A8CB63B
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: HealthappStack/KBS3DataSource/DataSource/Default
  KBS3DataSourceDataSourceCRPolicy4A8CB63B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:CreateDataSource
              - bedrock:DeleteDataSource
              - bedrock:UpdateDataSource
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:'
                - !Ref AWS::Partition
                - ':bedrock:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':knowledge-base/*'
          - Action:
              - s3:GetObject
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !GetAtt HealthDocumentBucketD3CB5681.Arn
              - !Join
                - ''
                - - !GetAtt HealthDocumentBucketD3CB5681.Arn
                  - /*
        Version: '2012-10-17'
      PolicyName: KBS3DataSourceDataSourceCRPolicy4A8CB63B
      Roles:
        - !Ref BedrockCRProviderCRRole90406B17
    Metadata:
      aws:cdk:path: HealthappStack/KBS3DataSource/DataSourceCRPolicy/Resource
      cdk_nag:
        rules_to_suppress:
          - reason: Bedrock CreateDataSource uses wildcards to access any object in the specified bucket. A weird race condition makes CreateDataSource fail due to permissions on the first attempt. Permitting CreateDataSource on all KnowledgeBases allows CFN to deploy this policy earlier and avoid the race.
            id: AwsSolutions-IAM5
  KBQueryFunctionServiceRole855C010D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryFunction/ServiceRole/Resource
  KBQueryFunctionServiceRoleDefaultPolicyA39A0FFA:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - !GetAtt HealthTableB882C94E.Arn
              - !Ref AWS::NoValue
          - Action:
              - bedrock:InvokeModel
              - bedrock:Retrieve
              - bedrock:RetrieveAndGenerate
            Effect: Allow
            Resource:
              - arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0
              - !Join
                - ''
                - - 'arn:aws:bedrock:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':knowledge-base/'
                  - !GetAtt HealthKnowledgeBaseKBA7ABAFAC.knowledgeBaseId
        Version: '2012-10-17'
      PolicyName: KBQueryFunctionServiceRoleDefaultPolicyA39A0FFA
      Roles:
        - !Ref KBQueryFunctionServiceRole855C010D
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryFunction/ServiceRole/DefaultPolicy/Resource
  KBQueryFunction45452846:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 92ab89e0a51d893272bdb471a852aa46a7935725828b8ca6712fee11fa21965a.zip
      Environment:
        Variables:
          KB_ID: !GetAtt HealthKnowledgeBaseKBA7ABAFAC.knowledgeBaseId
          KB_MODEL_ARN: arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0
          TABLE_NAME: !Ref HealthTableB882C94E
      Handler: app.handler
      Role: !GetAtt KBQueryFunctionServiceRole855C010D.Arn
      Runtime: python3.12
      Timeout: 900
    DependsOn:
      - KBQueryFunctionServiceRoleDefaultPolicyA39A0FFA
      - KBQueryFunctionServiceRole855C010D
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryFunction/Resource
      aws:asset:path: asset.92ab89e0a51d893272bdb471a852aa46a7935725828b8ca6712fee11fa21965a
      aws:asset:is-bundled: false
      aws:asset:property: Code
  IngestionJobServiceRole82BC1069:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: HealthappStack/IngestionJob/ServiceRole/Resource
  IngestionJobServiceRoleDefaultPolicyEE1C0469:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: bedrock:StartIngestionJob
            Effect: Allow
            Resource: !GetAtt HealthKnowledgeBaseKBA7ABAFAC.knowledgeBaseArn
        Version: '2012-10-17'
      PolicyName: IngestionJobServiceRoleDefaultPolicyEE1C0469
      Roles:
        - !Ref IngestionJobServiceRole82BC1069
    Metadata:
      aws:cdk:path: HealthappStack/IngestionJob/ServiceRole/DefaultPolicy/Resource
  IngestionJob878E4082:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 92ab89e0a51d893272bdb471a852aa46a7935725828b8ca6712fee11fa21965a.zip
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID: !GetAtt HealthKnowledgeBaseKBA7ABAFAC.knowledgeBaseId
          DATA_SOURCE_ID: !GetAtt KBS3DataSource0370EBB1.dataSourceId
      Handler: sync_bedrock.handler
      Role: !GetAtt IngestionJobServiceRole82BC1069.Arn
      Runtime: python3.12
      Timeout: 900
    DependsOn:
      - IngestionJobServiceRoleDefaultPolicyEE1C0469
      - IngestionJobServiceRole82BC1069
    Metadata:
      aws:cdk:path: HealthappStack/IngestionJob/Resource
      aws:asset:path: asset.92ab89e0a51d893272bdb471a852aa46a7935725828b8ca6712fee11fa21965a
      aws:asset:is-bundled: false
      aws:asset:property: Code
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      aws:cdk:path: HealthappStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - !Ref BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: HealthappStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request
          s3 = boto3.client("s3")
          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]
          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              notification_configuration = props["NotificationConfiguration"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']
              old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
              if managed:
                config = handle_managed(event["RequestType"], notification_configuration)
              else:
                config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
              s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)
          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration
          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
            def with_id(n):
              n['Id'] = f"{stack_id}-{hash(json.dumps(n, sort_keys=True))}"
              return n
            external_notifications = {}
            existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
            for t in CONFIGURATION_TYPES:
              if request_type == 'Update':
                  ids = [with_id(n) for n in old.get(t, [])]
                  old_incoming_ids = [n['Id'] for n in ids]
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]
              elif request_type == 'Create':
                  external_notifications[t] = [n for n in existing_notifications.get(t, [])]
            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]
            if request_type == 'Delete':
              return external_notifications
            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming
            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]
            return notifications
          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role: !GetAtt BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC.Arn
      Runtime: python3.11
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: HealthappStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  KBQueryApiGW60BCE13E:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: KBQueryApiGW
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryApiGW/Resource
  KBQueryApiGWDeployment5C1B9353c00f5a11d4453445a0c7538a2e959d4c:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Automatically created by the RestApi construct
      RestApiId: !Ref KBQueryApiGW60BCE13E
    DependsOn:
      - KBQueryApiGWqueryPOST21EE4FCF
      - KBQueryApiGWqueryCDE4696D
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryApiGW/Deployment/Resource
  KBQueryApiGWDeploymentStageprod2047583F:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref KBQueryApiGWDeployment5C1B9353c00f5a11d4453445a0c7538a2e959d4c
      RestApiId: !Ref KBQueryApiGW60BCE13E
      StageName: prod
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryApiGW/DeploymentStage.prod/Resource
  KBQueryApiGWqueryCDE4696D:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt KBQueryApiGW60BCE13E.RootResourceId
      PathPart: query
      RestApiId: !Ref KBQueryApiGW60BCE13E
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryApiGW/Default/query/Resource
  KBQueryApiGWqueryPOSTApiPermissionHealthappStackKBQueryApiGWCF74A34CPOSTqueryA6DE9351:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt KBQueryFunction45452846.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref KBQueryApiGW60BCE13E
          - /
          - !Ref KBQueryApiGWDeploymentStageprod2047583F
          - /POST/query
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryApiGW/Default/query/POST/ApiPermission.HealthappStackKBQueryApiGWCF74A34C.POST..query
  KBQueryApiGWqueryPOSTApiPermissionTestHealthappStackKBQueryApiGWCF74A34CPOSTquery1F55841D:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt KBQueryFunction45452846.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref KBQueryApiGW60BCE13E
          - /test-invoke-stage/POST/query
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryApiGW/Default/query/POST/ApiPermission.Test.HealthappStackKBQueryApiGWCF74A34C.POST..query
  KBQueryApiGWqueryPOST21EE4FCF:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':apigateway:'
            - !Ref AWS::Region
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt KBQueryFunction45452846.Arn
            - /invocations
      ResourceId: !Ref KBQueryApiGWqueryCDE4696D
      RestApiId: !Ref KBQueryApiGW60BCE13E
    Metadata:
      aws:cdk:path: HealthappStack/KBQueryApiGW/Default/query/POST/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/3WSTW/bMAyGf0vuitrUw3pdmmJAsRYL7GHXgJZYR7UsGiKdzDD83wfL7pIC3YkPv16ClO70JrvXtys489rYeu1dqYdCwNQKznwYbB+gIVvq4ReUHtXuNSQYlYNGDznNsWT35J3pJ3ehFwhQob3EPwRGRS0GRojmyBhPGD0y62H3Ggo0XXTSXzp35D0acRQmb2sMMr/LeGhKC3r43oV/Fde8x9g4ZkdhVJwdgBmF9XYyijM9PHSmRnkARjXj1DTTqDxVrJ+pylEwJEVoXQWCZ+j18JxG58iybV06xIKP2HrqGwxJ7MorBKp0shlyZOqiwTT93VmEZn5BOZJN10s0jh/qdhSsmzftWKj5VCPtOg10oVIm1R3ikmS9j3RyFuPU8rOTtpNR3eqN3ny5X30ztvZQ8k2FASOIO+EaXPoqhgJL7IywHkq0kUythx+Bzh5tNS9UZI8gUKQ5/3nu32iE4tXzXqoOp5RzweKfpe5p4lHtezlSuMn05k5/Xb2xc+vYBXEN6ny2fwGl/DOI2AIAAA==
    Metadata:
      aws:cdk:path: HealthappStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  HealthKnowledgeBaseKBVectorsIsDataAccessPolicyNotEmpty2F65E018: !Not
    - !Equals
      - 0
      - 1
  CDKMetadataAvailable: !Or
    - !Or
      - !Equals
        - !Ref AWS::Region
        - af-south-1
      - !Equals
        - !Ref AWS::Region
        - ap-east-1
      - !Equals
        - !Ref AWS::Region
        - ap-northeast-1
      - !Equals
        - !Ref AWS::Region
        - ap-northeast-2
      - !Equals
        - !Ref AWS::Region
        - ap-south-1
      - !Equals
        - !Ref AWS::Region
        - ap-southeast-1
      - !Equals
        - !Ref AWS::Region
        - ap-southeast-2
      - !Equals
        - !Ref AWS::Region
        - ca-central-1
      - !Equals
        - !Ref AWS::Region
        - cn-north-1
      - !Equals
        - !Ref AWS::Region
        - cn-northwest-1
    - !Or
      - !Equals
        - !Ref AWS::Region
        - eu-central-1
      - !Equals
        - !Ref AWS::Region
        - eu-north-1
      - !Equals
        - !Ref AWS::Region
        - eu-south-1
      - !Equals
        - !Ref AWS::Region
        - eu-west-1
      - !Equals
        - !Ref AWS::Region
        - eu-west-2
      - !Equals
        - !Ref AWS::Region
        - eu-west-3
      - !Equals
        - !Ref AWS::Region
        - il-central-1
      - !Equals
        - !Ref AWS::Region
        - me-central-1
      - !Equals
        - !Ref AWS::Region
        - me-south-1
      - !Equals
        - !Ref AWS::Region
        - sa-east-1
    - !Or
      - !Equals
        - !Ref AWS::Region
        - us-east-1
      - !Equals
        - !Ref AWS::Region
        - us-east-2
      - !Equals
        - !Ref AWS::Region
        - us-west-1
      - !Equals
        - !Ref AWS::Region
        - us-west-2
Outputs:
  KBQueryApiGWEndpoint762DFA78:
    Value: !Join
      - ''
      - - https://
        - !Ref KBQueryApiGW60BCE13E
        - .execute-api.
        - !Ref AWS::Region
        - .
        - !Ref AWS::URLSuffix
        - /
        - !Ref KBQueryApiGWDeploymentStageprod2047583F
        - /
  ApiEndpoint:
    Description: The endpoint of the KB Query API
    Value: !Join
      - ''
      - - https://
        - !Ref KBQueryApiGW60BCE13E
        - .execute-api.
        - !Ref AWS::Region
        - .
        - !Ref AWS::URLSuffix
        - /
        - !Ref KBQueryApiGWDeploymentStageprod2047583F
        - /
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert: !Not
          - !Contains
            - - '1'
              - '2'
              - '3'
              - '4'
              - '5'
            - !Ref BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.