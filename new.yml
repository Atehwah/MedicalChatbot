Resources:
  HealthDocumentBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  bedrockIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: medicalChatKnowledgebaseRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Join
                  - ''
                  - - 'arn:'
                    - !Ref AWS::Partition
                    - ':bedrock:'
                    - !Ref AWS::Region
                    - ':'
                    - !Ref AWS::AccountId
                    - ':knowledge-base/*'
        Version: '2012-10-17'

  bedrockIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub med-chat-bedrock-policy
      Description: Managed policy for Lets Build Twitch Bedrock sessions
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowModelAccess
            Effect: Allow
            Action:
              - bedrock:ListFoundationModels
              - bedrock:ListCustomModels
            Resource: '*'
          - Sid: AllowModelInvoke
            Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource:
              - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/*

          - Sid: s3Access
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !GetAtt HealthDocumentBucket.Arn
          - Sid: OpenSearchAccess
            Effect: Allow
            Action:
              - aoss:CreateCollection
              - aoss:UpdateCollection
              - aoss:DeleteCollection
              - aoss:APIAccessAll
            Resource:
              - !Sub arn:aws:aoss:${AWS::Region}:${AWS::AccountId}:collection/*
          - Sid: BedrockAccess
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:Retrieve
              - bedrock:RetrieveAndGenerate
              - bedrock:CreateKnowledgeBase
              - bedrock:UpdateKnowledgeBase
              - bedrock:DeleteKnowledgeBase
            Resource: "*"
              # - arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0

          # - Sid: BedrockKnowledgeBaseAccess
          #   Effect: Allow
          #   Action:
          #     - bedrock:CreateKnowledgeBase
          #     - bedrock:UpdateKnowledgeBase
          #     - bedrock:DeleteKnowledgeBase
          #   Resource: '*'

  HealthKnowledgeBaseKBVectorsEncryptionPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: encryptionpolicyhealtors
      Policy: '{"Rules":[{"ResourceType":"collection","Resource":["collection/medicvectordb"]}],"AWSOwnedKey":true}'
      Type: encryption

  HealthKnowledgeBaseKBVectorsNetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: networkpolicyhealtctors
      Policy: '[{"Rules":[{"ResourceType":"collection","Resource":["collection/medicvectordb"]},{"ResourceType":"dashboard","Resource":["collection/medicvectordb"]}],"AllowFromPublic":true}]'
      Type: network

  DataAccessPolicy:
    Type: 'AWS::OpenSearchServerless::AccessPolicy'
    Properties:
      Name: medic-access-policy
      Type: data
      Description: Access policy for quickstart collection
      Policy: !Sub >-
        [{"Description":"Access for cfn user","Rules":[{"ResourceType":"index","Resource":["index/*/*"],"Permission":["aoss:*"]},
        {"ResourceType":"collection","Resource":["collection/medicvectordb"],"Permission":["aoss:*"]}],
        "Principal":["arn:aws:iam::${AWS::AccountId}:user/Estelle", "arn:aws:iam::${AWS::AccountId}:role/medicalChatKnowledgebaseRole"]}]

  OssCollection:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: medicvectordbkb
      Type: VECTORSEARCH
    DependsOn:
      - HealthKnowledgeBaseKBVectorsEncryptionPolicy
      - HealthKnowledgeBaseKBVectorsNetworkPolicy
      - DataAccessPolicy

  # KnowledgeBaseWithAoss:
  #   Type: AWS::Bedrock::KnowledgeBase
  #   Properties:
  #     Name: KnowledgeBaseNameKB
  #     Description: KnowledgeBaseDescription
  #     RoleArn: !GetAtt bedrockIAMRole.Arn
  #     KnowledgeBaseConfiguration:
  #       Type: "VECTOR"
  #       VectorKnowledgeBaseConfiguration:
  #         EmbeddingModelArn: !Sub "arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v1"
  #     StorageConfiguration:
  #       Type: OPENSEARCH_SERVERLESS
  #       OpensearchServerlessConfiguration:
  #         CollectionArn: "arn:aws:aoss:us-east-1:059609450404:collection/m7y7wempivi3tx4a9s93" # !GetAtt OssCollection.Arn # 
  #         VectorIndexName: "bedrock-knowledge-base-default-index"
  #         FieldMapping:
  #           VectorField: "bedrock-knowledge-base-default-vector"
  #           TextField: "AMAZON_BEDROCK_TEXT_CHUNK"
  #           MetadataField: "AMAZON_BEDROCK_METADATA"
  #   DependsOn:
  #     - bedrockIAMRole
  #   UpdateReplacePolicy: Delete
  #   DeletionPolicy: Delete
  # SampleDataSource:
  #   Type: AWS::Bedrock::DataSource
  #   Properties:
  #     KnowledgeBaseId: !Ref KnowledgeBaseWithAoss.KnowledgeBaseId
  #     Name: DataSourceName
  #     Description: DataSourceDescription
  #     DataSourceConfiguration:
  #       Type: "S3"
  #       S3Configuration:
  #         BucketArn: !GetAtt HealthDocumentBucket.Arn

  

# Other resources

  # HealthTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     AttributeDefinitions:
  #       - AttributeName: id
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: id
  #         KeyType: HASH
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 5
  #       WriteCapacityUnits: 5
  #     TableName: medical-chat-table
  #   UpdateReplacePolicy: Delete
  #   DeletionPolicy: Delete

  # AIQueryFunctionServiceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #               - lex.amazonaws.com
  #           Action: sts:AssumeRole
  #       Version: '2012-10-17'
  #     ManagedPolicyArns:
  #       - !Join
  #         - ''
  #         - - 'arn:'
  #           - !Ref AWS::Partition
  #           - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  # AIQueryFunctionServiceRoleDefaultPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyDocument:
  #       Statement:
  #         - Action:
  #             - dynamodb:PutItem
  #           Effect: Allow
  #           Resource:
  #             - !GetAtt HealthTable.Arn
  #         - Action:
  #             - bedrock:InvokeModel
  #             - bedrock:Retrieve
  #             - bedrock:RetrieveAndGenerate
  #           Effect: Allow
  #           Resource:
  #             - '*' # arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-v2
  #             - !Join
  #               - ''
  #               - - 'arn:aws:bedrock:'
  #                 - !Ref AWS::Region
  #                 - ':'
  #                 - !Ref AWS::AccountId
  #                 - ':knowledge-base/'
  #                 - !GetAtt KnowledgeBaseWithAoss.knowledgeBaseId
  #       Version: '2012-10-17'
  #     PolicyName: AIQueryFunctionServiceRoleDefaultPolicy
  #     Roles:
  #       - !Ref AIQueryFunctionServiceRole

  # AIQueryFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: AIQueryFunction
  #     Code:
  #       S3Bucket: !Sub cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
  #       S3Key: 92ab89e0a51d893272bdb471a852aa46a7935725828b8ca6712fee11fa21965a.zip
  #     Environment:
  #       Variables:
  #         MODEL_ID: anthropic.claude-v2
  #         MODEL_ARN: arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-v2
  #         TABLE_NAME: !Ref HealthTable
  #     Handler: app.handler
  #     Role: !GetAtt AIQueryFunctionServiceRole.Arn
  #     Runtime: python3.12
  #     Timeout: 900
  #   DependsOn:
  #     - AIQueryFunctionServiceRoleDefaultPolicy
  #     - AIQueryFunctionServiceRole

  # LexBot:
  #   Type: AWS::Lex::Bot
  #   Properties:
  #     Name: MedicalChatbot
  #     RoleArn: !GetAtt AIQueryFunctionServiceRole.Arn
  #     DataPrivacy:
  #       ChildDirected: false
  #     IdleSessionTTLInSeconds: 300
  #     BotLocales:
  #       - LocaleId: en_US
  #         Description: English locale
  #         NluConfidenceThreshold: 0.4
  #         Intents:
  #           - Name: MedicIntent
  #             SampleUtterances:
  #               - Utterance: Hello
  #               - Utterance: Hi
  #               - Utterance: Greetings
  #             SlotPriorities:
  #               - Priority: 1
  #                 SlotName: question
  #             Slots:
  #               - Name: question
  #                 SlotTypeName: AMAZON.FreeFormInput
  #                 ValueElicitationSetting:
  #                   SlotConstraint: Required
  #                   PromptSpecification:
  #                     MessageGroupsList:
  #                       - Message:
  #                           PlainTextMessage:
  #                             Value: Please enter a prompt
  #                     MaxRetries: 2
  #             FulfillmentCodeHook:
  #               Enabled: true
  #           - Name: FallbackIntent
  #             Description: Handles unmatched user input
  #             ParentIntentSignature: AMAZON.FallbackIntent

  # MedicalBotVersionWithCFN:
  #   DependsOn: LexBot
  #   Type: AWS::Lex::BotVersion
  #   Properties:
  #     BotId: !Ref LexBot
  #     BotVersionLocaleSpecification:
  #       - LocaleId: en_US
  #         BotVersionLocaleDetails:
  #           SourceBotVersion: DRAFT
  #     Description: MedicalChatbot Version

  # FirstBotAliasWithCFN:
  #   DependsOn: MedicalBotVersionWithCFN
  #   Type: AWS::Lex::BotAlias
  #   Properties:
  #     BotId: !Ref LexBot
  #     BotAliasName: MedicalChatboAliasVersion
  #     BotAliasLocaleSettings:
  #       - LocaleId: en_US
  #         BotAliasLocaleSetting:
  #           Enabled: true
  #           CodeHookSpecification:
  #             LambdaCodeHook:
  #               CodeHookInterfaceVersion: '1.0'
  #               LambdaArn: !GetAtt AIQueryFunction.Arn
  #     SentimentAnalysisSettings:
  #       DetectSentiment: true

  # LexInvokeLambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref AIQueryFunction
  #     Principal: lex.amazonaws.com
  #     SourceArn: !Sub arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/${LexBot}/TSTALIASID
  #   DependsOn: FirstBotAliasWithCFN